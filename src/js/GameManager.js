import*as r from"three";import{GLTFLoader as t}from"three/addons/loaders/GLTFLoader.js";import n from"./RendererManager.js";import i from"./SectionManager.js";import s from"./DOMManager.js";import a from"./CameraManager.js";import o from"./section/TitleSection/TitleSection.js";import h from"./section/GameSection/GameSection.js";import d from"./section/ResultSection/ResultSection.js";import c from"./Player.js";import l from"./Enemy.js";import*as u from"./Event.js";import{Disk as g,Board as m}from"./Object.js";import p from"./Logger.js";import{sleep as E}from"./Utils.js";export default class M extends r.EventDispatcher{static BEFORE_START=0;static IN_GAME=1;static GAME_OVER=2;static MODE_NORMAL=0;static MODE_HOTHEADED=1;#isMobile=false;GAME_STATE;GAME_MODE;GAME_PLAY_COUNT=0;#frame;#startTime;#endTime;#scene;#currentSection;#rendererManager;#sectionManager;#domManager;#cameraManager;#logger;#board;#player;#enemy;#LU;#LD;#RU;#RD;#currentTurn;#result;#objectPool={board:undefined,disk:undefined};#audio={start:new Audio("./audio/gamestart.mp3"),open:new Audio("./audio/open.mp3"),put:new Audio("./audio/put__.mp3"),flip:new Audio("./audio/flip__.mp3"),bang:new Audio("./audio/daipan_audio.mp3"),bang_cut:new Audio("./audio/d_cutin.mp3")};constructor(){super();this.modelLoad().then(()=>{this.init();this.disableLoadingScreen()});const{userAgent:e,userAgentData:t}=navigator;if(t==null){this.#isMobile=e.match(/iPhone|Android.+Mobile/)!=null}else{this.#isMobile=t.mobile}}modelLoad(){let r={board:false,disk:false};const n=document.getElementById("disk_progress");const i=document.getElementById("board_progress");const e=new t;return new Promise(t=>{e.load("model_data/Board_low.gltf",e=>{this.#objectPool.board=e;r.board=true;if(Object.values(r).every(e=>{return e}))t()},e=>{console.log(`[Model loading: Board] ${e.loaded/e.total*100}% loaded`);i.value=e.loaded/e.total*100});e.load("model_data/Disk.gltf",e=>{this.#objectPool.disk=e;r.disk=true;if(Object.values(r).every(e=>{return e}))t()},e=>{console.log(`[Model loading: Disk] ${e.loaded/e.total*100}% loaded`);n.value=e.loaded/e.total*100})})}disableLoadingScreen(){const e=document.getElementById("caution_screen");if(screen.orientation.type.includes("landscape"))e.style.display="none";const t=document.getElementById("loading_screen");t.style.display="none"}run(){const e=()=>{requestAnimationFrame(e);this.#frame+=1;if(this.#isMobile&&this.#frame%2==0)return;if(this.#currentSection)this.#currentSection.run();if(this.#cameraManager)this.#cameraManager.update();if(this.#rendererManager&&this.#scene)this.#rendererManager.render(this.#scene)};e()}init(){const e=new URL(window.location.href);const t=e.searchParams;this.#frame=0;this.#scene=new r.Scene;this.#rendererManager=new n(this);this.#sectionManager=new i(this,this.#rendererManager,this.#scene);this.#cameraManager=new a(this,this.#rendererManager,this.#scene);this.#currentSection=new o(this,this.#rendererManager,this.#cameraManager,this.#scene);this.#domManager=new s(this,this.#rendererManager,this.#cameraManager);this.#logger=new p(document.getElementById("log"));if(t.get("logged")==="true")this.#logger.on();this.#logger.enabled=true;this.#domManager.addDOMEventListeners();this.#sectionManager.changeSection(this.#currentSection);this.GAME_STATE=M.BEFORE_START;this.#currentTurn=g.BLACK;this.addIngameListener()}addIngameListener(){this.addEventListener("game_start",async e=>{if(this.GAME_STATE!=M.BEFORE_START)return;this.#startTime=e.time;this.#board=new m(8,8);this.#currentSection=new h(this,this.#rendererManager,this.#cameraManager,this.#scene);this.#sectionManager.changeSection(this.#currentSection);this.#logger.log("[Event]: game_start");this.#enemy=new l(this,g.BLACK);this.#player=new c(this,g.WHITE);this.#player.name=this.#domManager.getPlayerName()});this.addEventListener("turn_notice",()=>{this.#logger.log(`@gm > waiting ${this.#currentTurn==g.BLACK?"Enemy":`${this.#player.name}`}'s response ...`)});this.addEventListener("put_notice",e=>{if(this.GAME_STATE!=M.IN_GAME)return;let t=e.order;let r=e.x;let n=e.y;if(t!==this.#currentTurn)return;this.#logger.log("gameManager received: put_notice");if(this.checkCanPut(r,n)){let e=this.countReversible(this.#currentTurn,r,n);this.put(r,n);this.#logger.log("gameManager send: put_success");this.checkCorner(t,r,n);this.dispatchEvent(new u.PutSuccessEvent(this.#currentTurn,{x:r,y:n},e))}else{this.#logger.log("gameManager send: put_fail");this.dispatchEvent(new u.PutFailEvent(this.#currentTurn))}});this.addEventListener("bang_notice",t=>{this.#logger.log(`[BANG] x: ${t.x}, y: ${t.y}`);let r=this.board.raffle(t.order,t.x,t.y,t.anger);for(let e of r)this.checkCorner(t.order,e.x,e.y);this.dispatchEvent(new u.BangSuccessEvent({order:this.#currentTurn,pos:r}))});this.addEventListener("bang_success",e=>{this.#logger.log("gameManager received: bang_success");this.getPlayerFromOrder(e.order).bang+=e.pos.length});this.addEventListener("confirmed",e=>{this.#logger.log("gameManager received: confirmed")});this.addEventListener("updated",async()=>{this.#logger.log("gameManager received: updated");if(this.GAME_STATE==M.BEFORE_START){this.GAME_STATE=M.IN_GAME;await E(1e3);this.dispatchEvent(new u.TurnNoticeEvent(g.BLACK,this.#board,true))}else if(this.GAME_STATE==M.IN_GAME){await E(1e3);this.dispatchEvent(new u.TurnChangeEvent)}});this.addEventListener("put_pass",e=>{if(e.order!==this.#currentTurn)return;this.#logger.log("gameManager received: put_pass");this.dispatchEvent(new u.TurnChangeEvent)});this.addEventListener("turn_change",()=>{this.#logger.log("gameManager received: turn_change");this.#currentTurn==g.BLACK?this.#currentTurn=g.WHITE:this.#currentTurn=g.BLACK;this.#domManager.orderUpdate();this.angerUpdate();if(this.checkGameOver()){this.#result=this.getResult();this.dispatchEvent(new u.GameOverEvent(this.#result))}else{this.#logger.log(`[${this.#currentTurn==g.BLACK?"Enemy's":`${this.#player.name}'s`} turn]`);this.dispatchEvent(new u.TurnNoticeEvent(this.#currentTurn,this.#board,this.checkTable(this.#currentTurn)))}});this.addEventListener("game_over",async e=>{if(this.GAME_STATE!=M.IN_GAME)return;this.GAME_STATE=M.GAME_OVER;this.#endTime=e.time;this.calcScore(e);this.sendResult(e);await E(1e3);this.#currentSection=new d(this,this.#rendererManager,this.#cameraManager,this.#scene,this.#result);this.#sectionManager.changeSection(this.#currentSection)});this.addEventListener("game_restart",e=>{if(this.GAME_STATE!=M.GAME_OVER)return;this.GAME_PLAY_COUNT++;this.restart()})}angerUpdate(){this.#domManager.angerUpdate()}restart(){this._listeners={};this.init()}checkGameOver(){if(!this.checkTable(g.BLACK)&&!this.checkTable(g.WHITE)){return true}else{return false}}checkTable(r){for(let t=0;t<this.#board.height;t++){for(let e=0;e<this.#board.width;e++){if(this.#board.putJudgement(r,e,t)){return true}}}return false}checkCanPut(e,t){return this.#board.putJudgement(this.#currentTurn,e,t)}checkCorner(t,r,n){const i={0:{0:"LU",7:"LD"},7:{0:"RU",7:"RD"}};try{let e=i[r][n];if(e){console.log(`${e} was taken by ${t==g.WHITE?"white":"black"}`);this.dispatchEvent(new u.TakeCornerEvent(t,e))}}catch{}}put(e,t){this.#board.putDisk(this.#currentTurn,e,t)}countReversible(t,r,n){const i=[-1,-1,-1,0,0,1,1,1];const s=[-1,0,1,-1,1,-1,0,1];let a=0;for(let e=0;e<8;e++){a+=this.#board.countReversible(t,r,n,s[e],i[e])}return a}calcScore(e){const t=Math.round((this.endTime-this.startTime)/1e3);this.#player.point+=e.result.white*12.5;this.#player.point+=this.#player.bang*10;this.#player.point+=Math.max(360-t,0);const r=[{x:0,y:0},{x:0,y:7},{x:7,y:0},{x:7,y:7}];for(let e of r){const i=this.board.getDisk(e.x,e.y).state;if(i!==g.EMPTY)this.getPlayerFromOrder(i).point+=250}let n=false;if(e.result.result==this.#player.order){this.#player.point+=1250;for(let e of this.board.table){if(e.state==g.EMPTY)n=true}}else{this.#player.point+=600}if(n)this.#player.point+=320;this.#player.point=Math.floor(this.#player.point);return this.#player.point}sendResult(e){const t=new FormData;const r=Math.round((this.endTime-this.startTime)/1e3);const n=document.getElementById("token").value;t.append("token",n);if(this.player.name!==null)t.append("name",this.player.name);t.append("board",JSON.stringify(this.board.table));t.append("bang",this.player.bang);t.append("score",this.player.point);t.append("gc",this.GAME_PLAY_COUNT);t.append("mode",this.GAME_MODE);t.append("time",r);t.append("gametime",Math.round((this.endTime-this.startTime)/1e3));t.append("result",e.result.result);const i={method:"POST",body:t};fetch("php/score_registration.php",i).then(e=>e.json()).then(e=>{console.log(e)})}getResult(){let e=this.#board.count(g.BLACK);let t=this.#board.count(g.WHITE);let r=e<t?this.#player.order:this.#enemy.order;if(e==t)r=g.EMPTY;return{black:e,white:t,result:r}}getPlayerFromOrder(e){if(e==g.WHITE){return this.#player}else if(e==g.BLACK){return this.#enemy}}get isMobile(){return this.#isMobile}get objects(){return this.#objectPool}get audio(){return this.#audio}get player(){return this.#player}get enemy(){return this.#enemy}get currentTurn(){return this.#currentTurn}get LU(){return this.#LU}get LD(){return this.#LD}get RU(){return this.#RU}get RD(){return this.#RD}get currentSection(){return this.#currentSection}get board(){return this.#board}get mode(){return this.GAME_MODE}set mode(e){this.GAME_MODE=e}get startTime(){return this.#startTime}get endTime(){return this.#endTime}get logger(){return this.#logger}}
